# import numpy as np
# import matplotlib.pyplot as plt
# from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# # 真实值列表
# true_values = [17.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 38.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 60.0, 61.0, 61.0, 62.0, 62.0, 62.0, 64.0, 64.0, 65.0, 66.0, 66.0, 67.0, 67.0, 68.0, 70.0, 73.0, 71.0, 74.0, 76.0, 75.0, 77.0, 74.0]

# # 预测值列表
# predicted_values = [26.336334228515625, 25.200958251953125, 23.068538665771484, 28.230823516845703, 25.87761688232422, 28.916351318359375, 30.136425018310547, 23.599300384521484, 24.416671752929688, 27.412708282470703, 27.179004669189453, 32.10808181762695, 24.850852966308594, 25.96894073486328, 25.859661102294922, 29.01683807373047, 31.00225830078125, 26.276199340820312, 31.613859176635742, 25.96074676513672, 26.861003875732422, 24.605731964111328, 38.708740234375, 24.689109802246094, 28.585994720458984, 27.522106170654297, 24.35578155517578, 26.912273406982422, 33.7711181640625, 26.142005920410156, 29.386489868164062, 28.418182373046875, 25.03519058227539, 27.234737396240234, 37.066444396972656, 29.40666961669922, 28.716014862060547, 29.609485626220703, 25.155094146728516, 30.9571475982666, 32.19667053222656, 29.434589385986328, 30.750537872314453, 23.876049041748047, 34.35215759277344, 33.97469711303711, 31.057523727416992, 27.89769744873047, 32.81083297729492, 28.360881805419922, 30.438552856445312, 30.060977935791016, 30.734968185424805, 33.281829833984375, 29.858684539794922, 29.744800567626953, 32.629371643066406, 35.42533874511719, 35.30238342285156, 32.748695373535156, 32.81901550292969, 31.992216110229492, 30.565174102783203, 31.166902542114258, 28.719234466552734, 31.451793670654297, 28.11595916748047, 43.724327087402344, 34.249908447265625, 24.492168426513672, 28.24791717529297, 38.36085510253906, 32.006614685058594, 38.597808837890625, 34.163108825683594, 30.161548614501953, 34.3336181640625, 39.522342681884766, 33.262420654296875, 39.126434326171875, 43.66014099121094, 34.029693603515625, 36.82337188720703, 36.744728088378906, 34.47583770751953, 46.531219482421875, 45.4273681640625, 43.06248474121094, 43.763519287109375, 37.37262725830078, 40.799583435058594, 48.91926574707031, 39.251197814941406, 35.88892364501953, 30.90045166015625, 44.91605758666992, 50.436466217041016, 38.55720901489258, 47.51035690307617, 50.955291748046875, 38.956687927246094, 34.039039611816406, 49.03513717651367, 50.193119049072266, 44.82472229003906, 48.754032135009766, 48.42285919189453, 37.83740997314453, 48.681640625, 49.22674560546875, 48.890586853027344, 41.58412170410156, 49.21613693237305, 51.61750030517578, 54.76725387573242, 44.144256591796875, 46.8925666809082, 46.035194396972656, 38.51222610473633, 52.218994140625, 33.535614013671875, 52.167510986328125, 54.26935577392578, 53.948429107666016, 50.80420684814453, 58.36822509765625, 57.9849853515625, 46.81330108642578, 58.40060043334961, 51.91255569458008, 48.24468231201172, 51.70346450805664, 56.08062744140625, 51.96585464477539, 47.78931427001953, 56.80009078979492, 55.47316360473633, 59.67150115966797, 61.841064453125, 57.53678512573242, 62.180908203125, 52.96455764770508, 54.753265380859375, 60.41838836669922, 55.81318664550781, 57.004852294921875, 56.410552978515625, 44.94763946533203, 55.43359375, 51.081878662109375, 56.41590118408203, 59.262516021728516, 60.62689971923828, 56.93041229248047, 55.944766998291016, 47.91175079345703, 59.17890930175781, 57.798980712890625, 60.19586181640625, 65.02222442626953, 66.39690399169922, 59.947818756103516, 60.17942428588867, 63.68815612792969, 62.74290466308594, 62.547462463378906, 61.190391540527344, 64.38560485839844, 64.79149627685547, 58.318443298339844, 68.11337280273438, 67.5164794921875, 68.69266510009766, 62.23716354370117, 71.13121032714844, 59.56962203979492, 70.7876205444336, 72.82862091064453, 70.89691925048828]
# mse = mean_squared_error(true_values, predicted_values)
# mae = mean_absolute_error(true_values, predicted_values)
# r2 = r2_score(true_values, predicted_values)

# print("均方误差 (MSE)：", mse)
# print("平均绝对误差 (MAE)：", mae)
# print("确定系数 (R^2)：", r2)

# # 绘制散点图
# plt.figure(figsize=(10, 6))
# plt.scatter(true_values, predicted_values, color='#5E005E', label='True vs Predicted', alpha=0.7)

# plt.plot(true_values, true_values, color='red', linestyle='--', label='Perfect Prediction')
# plt.title('True vs Predicted Values')
# plt.xlabel('Chronological age')
# plt.ylabel('Predicted Lumbar age')
# plt.legend()
# plt.grid(True)
# plt.show()

# import numpy as np
# import matplotlib.pyplot as plt
# from scipy.stats import linregress
# from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# import numpy as np
# import matplotlib.pyplot as plt
# from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
# from scipy.stats import linregress

# # # 真实值和预测值列表
# true_values = [17.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 38.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 60.0, 61.0, 61.0, 62.0, 62.0, 62.0, 64.0, 64.0, 65.0, 66.0, 66.0, 67.0, 67.0, 68.0, 70.0, 73.0, 71.0, 74.0, 76.0, 75.0, 77.0, 74.0]
# predicted_values = [21.296573638916016, 23.27056121826172, 21.556251525878906, 23.37358856201172, 28.34497833251953, 24.711666107177734, 27.53451156616211, 22.243186950683594, 24.234695434570312, 26.667572021484375, 28.781906127929688, 26.9296875, 23.013626098632812, 24.938236236572266, 23.995956420898438, 27.229782104492188, 31.266372680664062, 23.119827270507812, 25.15361785888672, 23.51492691040039, 23.299667358398438, 29.16165542602539, 32.269683837890625, 28.86786651611328, 30.710405349731445, 28.83880615234375, 24.924270629882812, 26.880760192871094, 26.406402587890625, 32.964515686035156, 27.062057495117188, 25.298660278320312, 28.329551696777344, 26.498149871826172, 28.819046020507812, 31.20435333251953, 27.93714141845703, 35.71116638183594, 30.45102310180664, 29.163169860839844, 31.82903289794922, 34.6925048828125, 33.146907806396484, 24.855426788330078, 32.320335388183594, 28.280200958251953, 30.027267456054688, 35.2901611328125, 33.67251205444336, 32.50998306274414, 29.858211517333984, 34.34478759765625, 30.885730743408203, 28.487686157226562, 26.24085235595703, 30.666393280029297, 38.07241439819336, 35.40876007080078, 34.70732116699219, 30.66921043395996, 32.70661926269531, 33.43924331665039, 35.08163833618164, 33.3870964050293, 31.4515380859375, 36.87498474121094, 31.55307388305664, 42.183006286621094, 34.17670822143555, 28.551441192626953, 36.42658615112305, 37.581809997558594, 37.479469299316406, 43.0172119140625, 35.791900634765625, 38.9431266784668, 32.470008850097656, 35.71154022216797, 36.334285736083984, 39.2397346496582, 42.0988883972168, 39.495872497558594, 38.85846710205078, 39.704463958740234, 42.50116729736328, 47.120208740234375, 42.453006744384766, 39.04662322998047, 36.15392303466797, 39.506591796875, 35.71080017089844, 50.02427673339844, 44.12415313720703, 46.82429504394531, 38.445823669433594, 44.501182556152344, 48.743125915527344, 43.23292541503906, 48.12730407714844, 48.53858184814453, 44.645050048828125, 41.93211364746094, 47.039878845214844, 50.669715881347656, 44.60198974609375, 43.67022705078125, 51.14381790161133, 45.01582336425781, 48.3118782043457, 44.028717041015625, 48.74882507324219, 40.77801513671875, 46.29175567626953, 50.06710433959961, 50.606571197509766, 45.973472595214844, 51.73118209838867, 50.167869567871094, 43.83617401123047, 51.72911071777344, 46.72873306274414, 49.87376022338867, 50.56968688964844, 53.206878662109375, 52.86679458618164, 53.69436264038086, 54.33921813964844, 50.42327117919922, 51.57517623901367, 52.06342697143555, 56.81121826171875, 53.71433639526367, 52.36737060546875, 54.3026008605957, 52.81864929199219, 54.83494186401367, 53.845699310302734, 60.0541877746582, 55.41688537597656, 53.602115631103516, 56.24493408203125, 51.036354064941406, 53.314083099365234, 51.285438537597656, 57.330204010009766, 61.74441146850586, 53.044918060302734, 46.99629592895508, 58.793617248535156, 57.361412048339844, 50.81477737426758, 53.34074401855469, 61.95996856689453, 61.91532897949219, 56.92576217651367, 61.10246276855469, 60.6451416015625, 57.8077392578125, 61.35550308227539, 59.26953125, 60.15382766723633, 60.47406768798828, 61.767452239990234, 65.51990509033203, 63.65806198120117, 60.6356201171875, 60.551334381103516, 65.02727508544922, 62.06404113769531, 65.74710083007812, 67.6075210571289, 69.68040466308594, 70.18928527832031, 61.9834098815918, 68.04218292236328, 61.69974899291992, 74.76795196533203, 74.49076080322266, 72.96957397460938]

# # 计算散点图上的差距
# differences = [true - pred for true, pred in zip(true_values, predicted_values)]

# # 计算回归评价指标
# mse = mean_squared_error(true_values, predicted_values)
# mae = mean_absolute_error(true_values, predicted_values)
# r_squared = r2_score(true_values, predicted_values)
# slope, intercept, r_value, p_value, std_err = linregress(true_values, predicted_values)

# # 绘制散点图
# plt.figure(figsize=(10, 6))
# plt.scatter(true_values, predicted_values, c=differences, cmap='magma', edgecolors='k', alpha=0.7)
# plt.colorbar(label='Residuals')
# plt.plot(np.unique(true_values), np.poly1d(np.polyfit(true_values, predicted_values, 1))(np.unique(true_values)), color='blue')  # 绘制拟合直线
# plt.title('Scatter Plot of True Values vs Predicted Values')
# plt.xlabel('Chronological age')
# plt.ylabel('Predicted Lumbar age')
# plt.grid(True)
# plt.show()

# # 打印回归评价指标和相关系数
# print(f"Mean Squared Error: {mse}")
# print(f"Mean Absolute Error: {mae}")
# print(f"R-squared: {r_squared}")
# print(f"Pearson's correlation coefficient: {r_value}")


# import pandas as pd
# import numpy as np
# from scipy import stats
# import matplotlib.pyplot as plt

# # 示例数据
# true_values = np.array([17.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 38.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 60.0, 61.0, 61.0, 62.0, 62.0, 62.0, 64.0, 64.0, 65.0, 66.0, 66.0, 67.0, 67.0, 68.0, 70.0, 73.0, 71.0, 74.0, 76.0, 75.0, 77.0, 74.0])
# predictions_method_1 = np.array([21.296573638916016, 23.27056121826172, 21.556251525878906, 23.37358856201172, 28.34497833251953, 24.711666107177734, 27.53451156616211, 22.243186950683594, 24.234695434570312, 26.667572021484375, 28.781906127929688, 26.9296875, 23.013626098632812, 24.938236236572266, 23.995956420898438, 27.229782104492188, 31.266372680664062, 23.119827270507812, 25.15361785888672, 23.51492691040039, 23.299667358398438, 29.16165542602539, 32.269683837890625, 28.86786651611328, 30.710405349731445, 28.83880615234375, 24.924270629882812, 26.880760192871094, 26.406402587890625, 32.964515686035156, 27.062057495117188, 25.298660278320312, 28.329551696777344, 26.498149871826172, 28.819046020507812, 31.20435333251953, 27.93714141845703, 35.71116638183594, 30.45102310180664, 29.163169860839844, 31.82903289794922, 34.6925048828125, 33.146907806396484, 24.855426788330078, 32.320335388183594, 28.280200958251953, 30.027267456054688, 35.2901611328125, 33.67251205444336, 32.50998306274414, 29.858211517333984, 34.34478759765625, 30.885730743408203, 28.487686157226562, 26.24085235595703, 30.666393280029297, 38.07241439819336, 35.40876007080078, 34.70732116699219, 30.66921043395996, 32.70661926269531, 33.43924331665039, 35.08163833618164, 33.3870964050293, 31.4515380859375, 36.87498474121094, 31.55307388305664, 42.183006286621094, 34.17670822143555, 28.551441192626953, 36.42658615112305, 37.581809997558594, 37.479469299316406, 43.0172119140625, 35.791900634765625, 38.9431266784668, 32.470008850097656, 35.71154022216797, 36.334285736083984, 39.2397346496582, 42.0988883972168, 39.495872497558594, 38.85846710205078, 39.704463958740234, 42.50116729736328, 47.120208740234375, 42.453006744384766, 39.04662322998047, 36.15392303466797, 39.506591796875, 35.71080017089844, 50.02427673339844, 44.12415313720703, 46.82429504394531, 38.445823669433594, 44.501182556152344, 48.743125915527344, 43.23292541503906, 48.12730407714844, 48.53858184814453, 44.645050048828125, 41.93211364746094, 47.039878845214844, 50.669715881347656, 44.60198974609375, 43.67022705078125, 51.14381790161133, 45.01582336425781, 48.3118782043457, 44.028717041015625, 48.74882507324219, 40.77801513671875, 46.29175567626953, 50.06710433959961, 50.606571197509766, 45.973472595214844, 51.73118209838867, 50.167869567871094, 43.83617401123047, 51.72911071777344, 46.72873306274414, 49.87376022338867, 50.56968688964844, 53.206878662109375, 52.86679458618164, 53.69436264038086, 54.33921813964844, 50.42327117919922, 51.57517623901367, 52.06342697143555, 56.81121826171875, 53.71433639526367, 52.36737060546875, 54.3026008605957, 52.81864929199219, 54.83494186401367, 53.845699310302734, 60.0541877746582, 55.41688537597656, 53.602115631103516, 56.24493408203125, 51.036354064941406, 53.314083099365234, 51.285438537597656, 57.330204010009766, 61.74441146850586, 53.044918060302734, 46.99629592895508, 58.793617248535156, 57.361412048339844, 50.81477737426758, 53.34074401855469, 61.95996856689453, 61.91532897949219, 56.92576217651367, 61.10246276855469, 60.6451416015625, 57.8077392578125, 61.35550308227539, 59.26953125, 60.15382766723633, 60.47406768798828, 61.767452239990234, 65.51990509033203, 63.65806198120117, 60.6356201171875, 60.551334381103516, 65.02727508544922, 62.06404113769531, 65.74710083007812, 67.6075210571289, 69.68040466308594, 70.18928527832031, 61.9834098815918, 68.04218292236328, 61.69974899291992, 74.76795196533203, 74.49076080322266, 72.96957397460938])
# predictions_method_2 = np.array([20.359386444091797, 20.981578826904297, 23.624629974365234, 24.684349060058594, 30.315608978271484, 24.79095458984375, 26.371707916259766, 18.99991226196289, 24.616226196289062, 30.11337661743164, 30.11798095703125, 21.79340362548828, 22.668331146240234, 22.341201782226562, 25.113727569580078, 23.627830505371094, 30.823440551757812, 28.45055389404297, 29.958984375, 26.660865783691406, 28.886119842529297, 33.931053161621094, 30.055355072021484, 29.089603424072266, 28.746875762939453, 30.40109634399414, 21.886062622070312, 31.881858825683594, 30.018817901611328, 29.64224624633789, 29.10088348388672, 27.603527069091797, 26.910720825195312, 29.414451599121094, 35.09528732299805, 32.046478271484375, 29.772506713867188, 32.318450927734375, 25.758460998535156, 27.585342407226562, 28.238800048828125, 34.72515869140625, 28.831012725830078, 25.90377426147461, 29.585201263427734, 33.877891540527344, 24.698802947998047, 28.372825622558594, 33.05821990966797, 29.483062744140625, 27.932640075683594, 36.66022491455078, 31.124025344848633, 25.72095489501953, 30.799821853637695, 30.25030517578125, 33.029876708984375, 31.040441513061523, 36.74241638183594, 30.5189208984375, 27.04672622680664, 29.91059112548828, 32.50680160522461, 31.66111946105957, 26.249603271484375, 31.099552154541016, 30.077320098876953, 40.710845947265625, 43.945106506347656, 30.648590087890625, 27.53711700439453, 36.72924041748047, 32.00118637084961, 35.916358947753906, 32.4539794921875, 33.78947067260742, 33.86930847167969, 32.1939811706543, 40.07756042480469, 39.506935119628906, 39.013885498046875, 31.767780303955078, 48.25291061401367, 35.56441879272461, 30.531200408935547, 54.28379440307617, 33.51396942138672, 34.73809814453125, 41.60188674926758, 33.3599853515625, 29.754714965820312, 49.89447021484375, 41.36022186279297, 44.317771911621094, 34.727760314941406, 43.738990783691406, 43.238616943359375, 41.3872184753418, 47.75445556640625, 49.669517517089844, 45.61174774169922, 42.199302673339844, 49.52839660644531, 50.40575408935547, 45.52775192260742, 40.382198333740234, 52.614707946777344, 38.41709518432617, 47.36898422241211, 44.2684440612793, 45.10333251953125, 32.56770324707031, 41.91485595703125, 53.15675354003906, 53.03179168701172, 37.74666213989258, 50.216407775878906, 38.89655303955078, 43.853668212890625, 47.10209655761719, 35.06809997558594, 49.73231506347656, 43.35698699951172, 44.10224151611328, 47.26051330566406, 47.21842575073242, 55.51325225830078, 40.419612884521484, 52.30570983886719, 51.1917610168457, 54.92708206176758, 45.81974792480469, 50.046592712402344, 52.2424430847168, 53.54248046875, 58.502899169921875, 55.523651123046875, 59.589447021484375, 57.6822624206543, 56.17357635498047, 61.31023406982422, 46.7022705078125, 54.27058792114258, 54.823211669921875, 54.83047866821289, 53.019195556640625, 45.56232452392578, 50.99714660644531, 52.524723052978516, 54.419620513916016, 45.869667053222656, 51.81822204589844, 59.1754035949707, 51.88494873046875, 50.555782318115234, 61.473716735839844, 58.927337646484375, 63.6817512512207, 53.464439392089844, 64.830322265625, 54.49223327636719, 39.362892150878906, 57.93914031982422, 64.49085998535156, 62.23607635498047, 60.978153228759766, 57.5108757019043, 63.441429138183594, 61.33943176269531, 66.27832794189453, 66.56902313232422, 69.6268539428711, 70.08366394042969, 67.25054168701172, 64.0247573852539, 63.84609603881836, 71.85539245605469, 72.2047348022461, 71.53009033203125])
# # 计算差值
# diff_method_1_true = predictions_method_1 - true_values
# diff_method_2_method_1 = predictions_method_2 - predictions_method_1

# # 计算p-value
# t_statistic, p_value = stats.ttest_rel(np.abs(diff_method_1_true), np.abs(diff_method_2_method_1))

# # 创建DataFrame保存结果
# results = pd.DataFrame({
#     'Diff_Method_1_True_Abs': np.abs(diff_method_1_true),
#     'Diff_Method_2_Method_1_Abs': np.abs(diff_method_2_method_1),
#     'p_value': [p_value] + [None] * (len(true_values) - 1)  # 只在第一行显示p-value
# })

# # 保存到Excel
# file_path = "regression_differences.xlsx"
# results.to_excel(file_path, index=False)

# # 绘制图形
# plt.figure(figsize=(10, 6))
# plt.scatter(true_values, true_values, color='orange', marker='o', label='Chronological age', zorder=5)
# plt.scatter(true_values, predictions_method_1, color='purple', marker='s', label='L1-L3_predict age', zorder=5)
# plt.scatter(true_values, predictions_method_2, color='brown', marker='x', label='L3-L4_predict age', zorder=5)

# # 画红色短线段
# # for i in range(len(true_values)):
# #     plt.plot([true_values[i], true_values[i]], [predictions_method_1[i], predictions_method_2[i]], 'r-',
# #              alpha=min(1, abs(predictions_method_1[i] - predictions_method_2[i]) / max(abs(predictions_method_1 - predictions_method_2))))

# # for i in range(len(true_values)):
# #     diff = abs(predictions_method_1[i] - predictions_method_2[i])
# #     plt.plot([true_values[i], true_values[i]], [predictions_method_1[i], predictions_method_2[i]], 
# #              color=(1, 0, 0, min(1, diff / max(abs(predictions_method_1 - predictions_method_2)))), zorder=1)

# # 画红色短线段并注解差值
# for i in range(len(true_values)):
#     diff = abs(predictions_method_1[i] - predictions_method_2[i])
#     plt.plot([true_values[i], true_values[i]], [predictions_method_1[i], predictions_method_2[i]], 
#              color=(1, 0, 0, min(1, diff / max(abs(predictions_method_1 - predictions_method_2)))), zorder=1)
#     plt.text(true_values[i], (predictions_method_1[i] + predictions_method_2[i]) / 2, f'{diff:.2f}', 
#              color='red', fontsize=8, ha='right')

# plt.xlabel('True Values')
# plt.ylabel('Predicted Values')
# plt.legend()
# plt.title('Comparison of Predictions by L1-L3/L3-L4')
# plt.show()

# print(f"Results saved to {file_path}")

# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt

# # 读取Excel文件
# file_path = 'regression_differences.xlsx'  # 请将此处的文件路径替换为你的Excel文件路径
# data = pd.read_excel(file_path)

# # 计算前两列数据的五分位数
# quantiles_1 = data.iloc[:, 0].quantile([0.2, 0.4, 0.6, 0.8, 1.0])
# quantiles_2 = data.iloc[:, 1].quantile([0.2, 0.4, 0.6, 0.8, 1.0])

# # 打印五分位数
# print("Column 1 Quantiles:")
# print(quantiles_1)
# print("\nColumn 2 Quantiles:")
# print(quantiles_2)

# # 绘制五分位风险预测曲线图
# plt.figure(figsize=(10, 6))

# # 绘制第一列数据的五分位风险预测曲线
# plt.plot([1, 2, 3, 4, 5], quantiles_1, 'bo-', label='Column 1 Quantiles')

# # 绘制第二列数据的五分位风险预测曲线
# plt.plot([1, 2, 3, 4, 5], quantiles_2, 'ro-', label='Column 2 Quantiles')

# # 添加标签和标题
# plt.xlabel('Quantile Index')
# plt.ylabel('Value')
# plt.title('Quantile Risk Prediction Curve')
# plt.legend()

# # 显示图形
# plt.show()
# import seaborn as sns
# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt
# # 生成示例数据
# data = pd.DataFrame({
#     'Value': np.concatenate([np.random.normal(5, 1, 50), np.random.normal(7, 1, 50)]),
#     'Risk Group': ['Low Risk'] * 50 + ['High Risk'] * 50
# })

# # 箱线图
# plt.figure(figsize=(10, 6))
# sns.boxplot(x='Risk Group', y='Value', data=data)
# plt.xlabel('Risk Group')
# plt.ylabel('Value')
# plt.title('Box Plot of Values by Risk Group')
# plt.grid(True)
# plt.show()


# import pandas as pd
# import numpy as np
# from lifelines import KaplanMeierFitter
# import matplotlib.pyplot as plt

# # 读取Excel文件
# file_path = 'regression_differences.xlsx'  # 请将此处的文件路径替换为你的Excel文件路径
# data = pd.read_excel(file_path)

# # 取绝对值
# data['Diff_Method_2_Method_1_Abs'] = data.iloc[:, 0].abs()

# # 计算分位数
# quantiles = data['Diff_Method_2_Method_1_Abs'].quantile([0.2, 0.4, 0.6, 0.8, 1.0])

# # 定义风险等级和对应的疾病发生概率范围
# risk_levels = ['Low', 'Medium', 'Medium-High', 'High', 'Very High']
# probability_ranges = {
#     'Low': (0.0, 0.2),
#     'Medium': (0.21, 0.4),
#     'Medium-High': (0.41, 0.6),
#     'High': (0.61, 0.8),
#     'Very High': (0.81, 1.0)
# }

# # 创建存储生存数据的字典
# survival_data = {level: {'duration': [], 'event': []} for level in risk_levels}

# # 生成生存时间和事件发生标志
# np.random.seed(42)  # 为了结果可复现

# for value in data['Diff_Method_2_Method_1_Abs']:
#     if value <= quantiles[0.2]:
#         risk = 'Low'
#     elif value <= quantiles[0.4]:
#         risk = 'Medium'
#     elif value <= quantiles[0.6]:
#         risk = 'Medium-High'
#     elif value <= quantiles[0.8]:
#         risk = 'High'
#     else:
#         risk = 'Very High'

#     # 获取对应的概率范围
#     prob_range = probability_ranges[risk]
#     prob = np.random.uniform(prob_range[0], prob_range[1])
    
#     # 模拟生存时间和事件发生
#     survival_time = np.random.uniform(0, 60)  # 在0到60个月之间
#     event = np.random.binomial(1, prob)  # 根据概率生成事件发生标志

#     # 存储数据
#     survival_data[risk]['duration'].append(survival_time)
#     survival_data[risk]['event'].append(event)

# # 创建Kaplan-Meier生存曲线
# kmf = KaplanMeierFitter()

# plt.figure(figsize=(12, 8))

# # 为每个风险等级绘制生存曲线
# for risk in risk_levels:
#     kmf.fit(survival_data[risk]['duration'], event_observed=survival_data[risk]['event'], label=risk)
#     kmf.plot_survival_function()

# # 添加标签和标题
# plt.xlabel('18-35years_Time (months)')
# plt.ylabel('Survival Probability')
# plt.title('Kaplan-Meier Survival Curves by Risk Level')
# plt.grid(True)
# plt.legend(title='Risk Level')
# plt.show()



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 读取Excel文件
file_path = 'G:/age_regression/yyl/Spine_Data/seg13/extracted/signal/signal_updated16.xlsx'  # 请将此处替换为你的Excel文件路径
df = pd.read_excel(file_path)

# 获取"Average Signal Value"列，并计算阶段
df['Stage'] = (df['Average Signal Value'] // 5) * 5

# 获取第11列（索引为10）那一行的值
reference_values = df.iloc[0, 10]

# 计算第4列到第10列的值分别与第11列那一行的值做除法运算后乘以1000
new_values = df.iloc[:, 5:10].apply(lambda x: (x / reference_values) * 10000, axis=1)

# 将新值添加到数据框中
#new_values.columns = [f'Intervertebral disc_{i}' for i in range(4, 11)]
new_values.columns = [f'ID_{i}' for i in range(5, 10)]
df = pd.concat([df, new_values], axis=1)
# 根据阶段计算每个阶段的新7列的均值和标准误差
mean_values = df.groupby('Stage')[new_values.columns].mean()
std_err = df.groupby('Stage')[new_values.columns].sem()

# 绘制变化曲线
plt.figure(figsize=(10, 6))
for column in mean_values.columns:
    plt.plot(mean_values.index, mean_values[column], marker='o', label=column)
    plt.fill_between(mean_values.index, 
                     mean_values[column] - std_err[column], 
                     mean_values[column] + std_err[column], 
                     alpha=0.2)

# # 根据阶段计算每个阶段的新7列的均值
# mean_values = df.groupby('Stage')[new_values.columns].mean()

# # 绘制变化曲线
# plt.figure(figsize=(10, 6))
# for column in mean_values.columns:
#     plt.plot(mean_values.index, mean_values[column], marker='o', label=column)

# 添加标签和标题
plt.xlabel('Average Signal Value (by 5-year stages)_Male( 1040 subjects)')
plt.ylabel('The Ratio of Intervertebral Disc Signals to Spinal Cord Signals')
plt.title('IVDD Signal Curve Based on Nuclear Magnetic Imaging by 5-year Stages')
plt.legend()
plt.grid(True)
plt.show()



# import numpy as np
# import matplotlib.pyplot as plt

# # 生成示例数据
# np.random.seed(0)



# # 三种不同方法的预测值（示例）
# true_values = np.array([17.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 24.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 38.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 60.0, 61.0, 61.0, 62.0, 62.0, 62.0, 64.0, 64.0, 65.0, 66.0, 66.0, 67.0, 67.0, 68.0, 70.0, 73.0, 71.0, 74.0, 76.0, 75.0, 77.0, 74.0])
# predicted_values_1 = np.array([21.296573638916016, 23.27056121826172, 21.556251525878906, 23.37358856201172, 28.34497833251953, 24.711666107177734, 27.53451156616211, 22.243186950683594, 24.234695434570312, 26.667572021484375, 28.781906127929688, 26.9296875, 23.013626098632812, 24.938236236572266, 23.995956420898438, 27.229782104492188, 31.266372680664062, 23.119827270507812, 25.15361785888672, 23.51492691040039, 23.299667358398438, 29.16165542602539, 32.269683837890625, 28.86786651611328, 30.710405349731445, 28.83880615234375, 24.924270629882812, 26.880760192871094, 26.406402587890625, 32.964515686035156, 27.062057495117188, 25.298660278320312, 28.329551696777344, 26.498149871826172, 28.819046020507812, 31.20435333251953, 27.93714141845703, 35.71116638183594, 30.45102310180664, 29.163169860839844, 31.82903289794922, 34.6925048828125, 33.146907806396484, 24.855426788330078, 32.320335388183594, 28.280200958251953, 30.027267456054688, 35.2901611328125, 33.67251205444336, 32.50998306274414, 29.858211517333984, 34.34478759765625, 30.885730743408203, 28.487686157226562, 26.24085235595703, 30.666393280029297, 38.07241439819336, 35.40876007080078, 34.70732116699219, 30.66921043395996, 32.70661926269531, 33.43924331665039, 35.08163833618164, 33.3870964050293, 31.4515380859375, 36.87498474121094, 31.55307388305664, 42.183006286621094, 34.17670822143555, 28.551441192626953, 36.42658615112305, 37.581809997558594, 37.479469299316406, 43.0172119140625, 35.791900634765625, 38.9431266784668, 32.470008850097656, 35.71154022216797, 36.334285736083984, 39.2397346496582, 42.0988883972168, 39.495872497558594, 38.85846710205078, 39.704463958740234, 42.50116729736328, 47.120208740234375, 42.453006744384766, 39.04662322998047, 36.15392303466797, 39.506591796875, 35.71080017089844, 50.02427673339844, 44.12415313720703, 46.82429504394531, 38.445823669433594, 44.501182556152344, 48.743125915527344, 43.23292541503906, 48.12730407714844, 48.53858184814453, 44.645050048828125, 41.93211364746094, 47.039878845214844, 50.669715881347656, 44.60198974609375, 43.67022705078125, 51.14381790161133, 45.01582336425781, 48.3118782043457, 44.028717041015625, 48.74882507324219, 40.77801513671875, 46.29175567626953, 50.06710433959961, 50.606571197509766, 45.973472595214844, 51.73118209838867, 50.167869567871094, 43.83617401123047, 51.72911071777344, 46.72873306274414, 49.87376022338867, 50.56968688964844, 53.206878662109375, 52.86679458618164, 53.69436264038086, 54.33921813964844, 50.42327117919922, 51.57517623901367, 52.06342697143555, 56.81121826171875, 53.71433639526367, 52.36737060546875, 54.3026008605957, 52.81864929199219, 54.83494186401367, 53.845699310302734, 60.0541877746582, 55.41688537597656, 53.602115631103516, 56.24493408203125, 51.036354064941406, 53.314083099365234, 51.285438537597656, 57.330204010009766, 61.74441146850586, 53.044918060302734, 46.99629592895508, 58.793617248535156, 57.361412048339844, 50.81477737426758, 53.34074401855469, 61.95996856689453, 61.91532897949219, 56.92576217651367, 61.10246276855469, 60.6451416015625, 57.8077392578125, 61.35550308227539, 59.26953125, 60.15382766723633, 60.47406768798828, 61.767452239990234, 65.51990509033203, 63.65806198120117, 60.6356201171875, 60.551334381103516, 65.02727508544922, 62.06404113769531, 65.74710083007812, 67.6075210571289, 69.68040466308594, 70.18928527832031, 61.9834098815918, 68.04218292236328, 61.69974899291992, 74.76795196533203, 74.49076080322266, 72.96957397460938])
# predicted_values_2 = np.array([20.359386444091797, 20.981578826904297, 23.624629974365234, 24.684349060058594, 30.315608978271484, 24.79095458984375, 26.371707916259766, 18.99991226196289, 24.616226196289062, 30.11337661743164, 30.11798095703125, 21.79340362548828, 22.668331146240234, 22.341201782226562, 25.113727569580078, 23.627830505371094, 30.823440551757812, 28.45055389404297, 29.958984375, 26.660865783691406, 28.886119842529297, 33.931053161621094, 30.055355072021484, 29.089603424072266, 28.746875762939453, 30.40109634399414, 21.886062622070312, 31.881858825683594, 30.018817901611328, 29.64224624633789, 29.10088348388672, 27.603527069091797, 26.910720825195312, 29.414451599121094, 35.09528732299805, 32.046478271484375, 29.772506713867188, 32.318450927734375, 25.758460998535156, 27.585342407226562, 28.238800048828125, 34.72515869140625, 28.831012725830078, 25.90377426147461, 29.585201263427734, 33.877891540527344, 24.698802947998047, 28.372825622558594, 33.05821990966797, 29.483062744140625, 27.932640075683594, 36.66022491455078, 31.124025344848633, 25.72095489501953, 30.799821853637695, 30.25030517578125, 33.029876708984375, 31.040441513061523, 36.74241638183594, 30.5189208984375, 27.04672622680664, 29.91059112548828, 32.50680160522461, 31.66111946105957, 26.249603271484375, 31.099552154541016, 30.077320098876953, 40.710845947265625, 43.945106506347656, 30.648590087890625, 27.53711700439453, 36.72924041748047, 32.00118637084961, 35.916358947753906, 32.4539794921875, 33.78947067260742, 33.86930847167969, 32.1939811706543, 40.07756042480469, 39.506935119628906, 39.013885498046875, 31.767780303955078, 48.25291061401367, 35.56441879272461, 30.531200408935547, 54.28379440307617, 33.51396942138672, 34.73809814453125, 41.60188674926758, 33.3599853515625, 29.754714965820312, 49.89447021484375, 41.36022186279297, 44.317771911621094, 34.727760314941406, 43.738990783691406, 43.238616943359375, 41.3872184753418, 47.75445556640625, 49.669517517089844, 45.61174774169922, 42.199302673339844, 49.52839660644531, 50.40575408935547, 45.52775192260742, 40.382198333740234, 52.614707946777344, 38.41709518432617, 47.36898422241211, 44.2684440612793, 45.10333251953125, 32.56770324707031, 41.91485595703125, 53.15675354003906, 53.03179168701172, 37.74666213989258, 50.216407775878906, 38.89655303955078, 43.853668212890625, 47.10209655761719, 35.06809997558594, 49.73231506347656, 43.35698699951172, 44.10224151611328, 47.26051330566406, 47.21842575073242, 55.51325225830078, 40.419612884521484, 52.30570983886719, 51.1917610168457, 54.92708206176758, 45.81974792480469, 50.046592712402344, 52.2424430847168, 53.54248046875, 58.502899169921875, 55.523651123046875, 59.589447021484375, 57.6822624206543, 56.17357635498047, 61.31023406982422, 46.7022705078125, 54.27058792114258, 54.823211669921875, 54.83047866821289, 53.019195556640625, 45.56232452392578, 50.99714660644531, 52.524723052978516, 54.419620513916016, 45.869667053222656, 51.81822204589844, 59.1754035949707, 51.88494873046875, 50.555782318115234, 61.473716735839844, 58.927337646484375, 63.6817512512207, 53.464439392089844, 64.830322265625, 54.49223327636719, 39.362892150878906, 57.93914031982422, 64.49085998535156, 62.23607635498047, 60.978153228759766, 57.5108757019043, 63.441429138183594, 61.33943176269531, 66.27832794189453, 66.56902313232422, 69.6268539428711, 70.08366394042969, 67.25054168701172, 64.0247573852539, 63.84609603881836, 71.85539245605469, 72.2047348022461, 71.53009033203125])
# predicted_values_3 = np.array([20.709388732910156, 22.650421142578125, 22.356365203857422, 25.628448486328125, 23.648094177246094, 22.72052001953125, 24.858837127685547, 22.577369689941406, 21.945152282714844, 28.834152221679688, 26.75075912475586, 25.925392150878906, 23.64932632446289, 20.818683624267578, 23.28227996826172, 27.540916442871094, 32.33331298828125, 26.538578033447266, 29.03131103515625, 24.804466247558594, 27.616085052490234, 26.156810760498047, 36.594703674316406, 33.65392303466797, 27.480209350585938, 24.430416107177734, 22.631053924560547, 29.687835693359375, 26.819286346435547, 31.76658058166504, 28.238998413085938, 26.464641571044922, 23.252197265625, 28.379737854003906, 28.559261322021484, 26.151512145996094, 28.022422790527344, 25.656051635742188, 25.781631469726562, 33.401123046875, 28.704830169677734, 32.18059539794922, 29.185226440429688, 25.90926742553711, 27.234695434570312, 33.720436096191406, 25.043701171875, 31.877727508544922, 35.55771255493164, 26.386383056640625, 26.465797424316406, 35.48019027709961, 26.27515411376953, 28.4293212890625, 30.165454864501953, 26.659286499023438, 34.22639846801758, 31.5599308013916, 34.216094970703125, 30.822309494018555, 31.170368194580078, 29.709365844726562, 34.123085021972656, 31.420835494995117, 33.862281799316406, 28.50090789794922, 24.985313415527344, 35.74579620361328, 34.16603088378906, 25.55462646484375, 31.84980010986328, 31.494728088378906, 41.99177169799805, 37.529319763183594, 27.024311065673828, 37.111610412597656, 49.61525344848633, 35.07685089111328, 30.59552764892578, 32.627769470214844, 36.66434860229492, 33.46971130371094, 36.02314758300781, 41.203330993652344, 34.98063659667969, 46.95598602294922, 39.1395149230957, 34.177818298339844, 41.5614128112793, 43.58424377441406, 35.21723175048828, 42.55582046508789, 48.30585479736328, 45.354801177978516, 36.46459197998047, 54.01540756225586, 45.38681411743164, 50.02299499511719, 45.45824432373047, 51.23316955566406, 55.75320816040039, 41.58723449707031, 46.06624221801758, 45.94358825683594, 45.502418518066406, 47.062774658203125, 53.07945251464844, 38.68708419799805, 40.92871856689453, 54.04033660888672, 43.41694641113281, 35.27204895019531, 55.22027587890625, 59.372920989990234, 57.92875289916992, 34.77661895751953, 47.183311462402344, 45.77496337890625, 47.3514404296875, 52.03343200683594, 36.99412536621094, 47.55889129638672, 40.970428466796875, 50.089412689208984, 60.23388671875, 53.885467529296875, 62.030540466308594, 47.820472717285156, 46.51687240600586, 47.919837951660156, 44.56976318359375, 48.92222595214844, 47.521873474121094, 47.13915252685547, 48.66950225830078, 60.02964782714844, 54.03653335571289, 55.92916488647461, 61.905975341796875, 58.14646530151367, 56.668495178222656, 49.52705001831055, 43.000850677490234, 51.23923110961914, 61.129783630371094, 46.641902923583984, 49.706722259521484, 54.57403564453125, 53.788116455078125, 60.99913024902344, 49.22002410888672, 54.625728607177734, 58.59321594238281, 57.21925354003906, 58.64161682128906, 60.195045471191406, 57.96293640136719, 56.05620574951172, 54.201934814453125, 62.57504653930664, 59.10917282104492, 57.81369400024414, 58.06817626953125, 65.20568084716797, 59.52033996582031, 48.596431732177734, 66.59346771240234, 58.725379943847656, 61.54396438598633, 61.33317565917969, 58.05138397216797, 67.01185607910156, 67.50159454345703, 60.17533493041992, 61.457969665527344, 66.6351089477539, 69.64892578125, 70.6467514038086, 66.14570617675781])
# predicted_values_4 = np.array([27.199317932128906, 25.453121185302734, 23.35177993774414, 29.259521484375, 23.162208557128906, 26.174903869628906, 24.239971160888672, 21.70119857788086, 23.886871337890625, 27.280406951904297, 24.038436889648438, 26.225238800048828, 26.95334243774414, 21.912883758544922, 21.551517486572266, 26.218017578125, 40.52155303955078, 26.193199157714844, 28.463394165039062, 23.81222152709961, 30.677871704101562, 27.152606964111328, 37.23973846435547, 33.034515380859375, 31.675724029541016, 23.971946716308594, 26.30206298828125, 31.708534240722656, 26.387882232666016, 23.355857849121094, 31.955890655517578, 27.805130004882812, 26.71579360961914, 26.900806427001953, 32.88970947265625, 25.968608856201172, 25.120941162109375, 26.7161865234375, 22.244400024414062, 33.7736701965332, 23.968433380126953, 29.18295669555664, 31.3533878326416, 23.960933685302734, 27.30398178100586, 34.61796951293945, 25.712627410888672, 41.09442138671875, 31.8604793548584, 30.675743103027344, 29.194000244140625, 33.36613464355469, 26.921443939208984, 24.601512908935547, 28.693893432617188, 25.367210388183594, 41.98644256591797, 33.345191955566406, 34.831024169921875, 31.173072814941406, 31.741926193237305, 30.826416015625, 34.642051696777344, 34.897342681884766, 24.172340393066406, 34.67384338378906, 28.753036499023438, 32.99547576904297, 29.019454956054688, 25.101947784423828, 29.30581283569336, 34.78028106689453, 32.32115173339844, 42.8293342590332, 34.009239196777344, 29.742774963378906, 35.97837829589844, 37.6982421875, 32.82579803466797, 39.661720275878906, 41.862144470214844, 38.27655792236328, 33.76741027832031, 35.075836181640625, 28.762744903564453, 41.783843994140625, 48.78382110595703, 36.722373962402344, 37.27411651611328, 44.35650634765625, 41.733848571777344, 44.540672302246094, 47.29499816894531, 41.98533248901367, 37.631500244140625, 52.78556823730469, 49.0516357421875, 42.98612594604492, 38.00579071044922, 47.717254638671875, 52.7292366027832, 37.434139251708984, 40.59637451171875, 48.19292068481445, 42.307613372802734, 53.84859085083008, 53.737335205078125, 39.77985382080078, 38.72235870361328, 44.38771438598633, 42.72369384765625, 32.25300598144531, 54.519744873046875, 56.5589714050293, 56.523651123046875, 30.969602584838867, 46.87740707397461, 48.57013702392578, 42.65369415283203, 55.308834075927734, 33.64210510253906, 50.62290954589844, 36.0781364440918, 50.68043899536133, 57.796730041503906, 53.74596405029297, 52.92428207397461, 47.31168746948242, 47.835182189941406, 46.53765869140625, 53.22270202636719, 48.173160552978516, 49.90242004394531, 48.436859130859375, 45.31203842163086, 65.37207794189453, 51.2203254699707, 61.59334945678711, 57.17992401123047, 54.01596450805664, 49.69233703613281, 45.15123748779297, 50.62382888793945, 48.32383728027344, 56.06903076171875, 42.678985595703125, 50.856910705566406, 55.16461944580078, 46.665164947509766, 62.08158874511719, 47.42266082763672, 54.522666931152344, 55.694915771484375, 56.415618896484375, 60.653717041015625, 56.3015251159668, 57.82465744018555, 54.11566925048828, 48.935760498046875, 64.48925018310547, 52.428592681884766, 43.969398498535156, 61.774139404296875, 65.17576599121094, 56.63124465942383, 49.98274230957031, 62.293418884277344, 56.03180694580078, 54.081504821777344, 58.48815155029297, 56.8209342956543, 62.08258056640625, 67.49510955810547, 62.46796798706055, 67.75716400146484, 68.78570556640625, 69.03062438964844, 70.5969467163086, 62.780181884765625])

# # 计算差距
# diff_1 = np.abs(predicted_values_1 - true_values)
# diff_2 = np.abs(predicted_values_2 - true_values)
# diff_3 = np.abs(predicted_values_3 - true_values)
# diff_4 = np.abs(predicted_values_4 - true_values)

# # 找到每个点中差距最大的那个点
# max_diff_indices = np.argmax(np.array([diff_1, diff_2, diff_3, diff_4]), axis=0)
# max_diff_values = [predicted_values_1[max_diff_indices == 0], 
#                    predicted_values_2[max_diff_indices == 1], 
#                    predicted_values_3[max_diff_indices == 2], 
#                    predicted_values_4[max_diff_indices == 3]]
# max_diff_x = np.concatenate([true_values[max_diff_indices == i] for i in range(4)])
# # 统计每种方法差距最大的点的个数
# count_1 = np.sum(max_diff_indices == 0)
# count_2 = np.sum(max_diff_indices == 1)
# count_3 = np.sum(max_diff_indices == 2)
# count_4 = np.sum(max_diff_indices == 3)
# print(count_1)
# print(count_2)
# print(count_3)
# print(count_4)
# # 创建散点图
# plt.figure(figsize=(10, 6))


# plt.scatter(true_values, true_values, color='red', label='physical age', alpha=0.6)
# plt.scatter(true_values, predicted_values_1, color='blue', label='L1-L3', alpha=0.6)
# plt.scatter(true_values, predicted_values_2, color='green', label='L3-L4', alpha=0.6)
# plt.scatter(true_values, predicted_values_3, color='purple', label='L4-L5', alpha=0.6)
# plt.scatter(true_values, predicted_values_4, color='orange', label='L5-S', alpha=0.6)

# # 标记差距最大的点
# plt.scatter(max_diff_x, np.concatenate(max_diff_values), color='lightcoral', marker='x', label='Max Diff Points')

# plt.xlabel('Physical_Age')
# plt.ylabel('Predict_Age')
# plt.title('Scatter Plot of True Values and Predicted Values with Max Diff Points')
# plt.legend()
# plt.show()

# import os
# import shutil
# import pandas as pd

# # 读取Excel表格中的ID名字
# excel_file = 'G:/age_regression/yyl/Spine_Data/all_label.xls'
# df = pd.read_excel(excel_file)

# # 假设名字在列名为'name'的列中
# names_to_keep = df['ID'].tolist()

# # 定义文件夹路径
# source_folder = 'G:/age_regression/yyl/Spine_Data/crop_scale_intensity_resize12345'
# keep_folder = 'G:/age_regression/yyl/Spine_Data/crop_scale_intensity_resize12345_Male'
# move_folder = 'G:/age_regression/yyl/Spine_Data/crop_scale_intensity_resize12345_Female'

# # 确保目标文件夹存在
# os.makedirs(keep_folder, exist_ok=True)
# os.makedirs(move_folder, exist_ok=True)

# # 遍历源文件夹中的文件
# for filename in os.listdir(source_folder):
#     file_path = os.path.join(source_folder, filename)
#     # 检查文件是否在保留的名字列表中
#     if filename in names_to_keep:
#         shutil.move(file_path, os.path.join(keep_folder, filename))
#     else:
#         shutil.move(file_path, os.path.join(move_folder, filename))

# print("文件整理完毕。")

# import pandas as pd
# import matplotlib.pyplot as plt

# # 读取Excel表格
# excel_file = 'G:/age_regression/yyl/work2/2d-slice-set-networks/data/all_label.xls'
# df = pd.read_excel(excel_file)

# # 假设第二列是年龄，第三列是性别
# age_column = df.columns[1]
# gender_column = df.columns[2]

# # 分别统计男性（M）、女性（F）和整体的年龄分布
# age_counts_total = df[age_column].value_counts().sort_index()
# age_counts_male = df[df[gender_column] == 'M'][age_column].value_counts().sort_index()
# age_counts_female = df[df[gender_column] == 'F'][age_column].value_counts().sort_index()

# # 绘制统计曲线图
# plt.figure(figsize=(10, 6))
# plt.plot(age_counts_total.index, age_counts_total.values, label='Total', color='orange', marker='o')
# plt.plot(age_counts_male.index, age_counts_male.values, label='Male', color='lightgreen', marker='o')
# plt.plot(age_counts_female.index, age_counts_female.values, label='Female', color='lightblue', marker='o')

# # 添加标题和标签
# plt.title('Age Distribution by Gender')
# plt.xlabel('Age')
# plt.ylabel('Subjects_sample')
# plt.legend()
# plt.grid(True)

# # 显示图像
# plt.show()


# import matplotlib.pyplot as plt
# import numpy as np
# # 给定的两种方法的预测结果

# predictions_method1 = np.array([21.296573638916016, 23.27056121826172, 21.556251525878906, 23.37358856201172, 28.34497833251953, 24.711666107177734, 27.53451156616211, 22.243186950683594, 24.234695434570312, 26.667572021484375, 28.781906127929688, 26.9296875, 23.013626098632812, 24.938236236572266, 23.995956420898438, 27.229782104492188, 31.266372680664062, 23.119827270507812, 25.15361785888672, 23.51492691040039, 23.299667358398438, 29.16165542602539, 32.269683837890625, 28.86786651611328, 30.710405349731445, 28.83880615234375, 24.924270629882812, 26.880760192871094, 26.406402587890625, 32.964515686035156, 27.062057495117188, 25.298660278320312, 28.329551696777344, 26.498149871826172, 28.819046020507812, 31.20435333251953, 27.93714141845703, 35.71116638183594, 30.45102310180664, 29.163169860839844, 31.82903289794922, 34.6925048828125, 33.146907806396484, 24.855426788330078, 32.320335388183594, 28.280200958251953, 30.027267456054688, 35.2901611328125, 33.67251205444336, 32.50998306274414, 29.858211517333984, 34.34478759765625, 30.885730743408203, 28.487686157226562, 26.24085235595703, 30.666393280029297, 38.07241439819336, 35.40876007080078, 34.70732116699219, 30.66921043395996, 32.70661926269531, 33.43924331665039, 35.08163833618164, 33.3870964050293, 31.4515380859375, 36.87498474121094, 31.55307388305664, 42.183006286621094, 34.17670822143555, 28.551441192626953, 36.42658615112305, 37.581809997558594, 37.479469299316406, 43.0172119140625, 35.791900634765625, 38.9431266784668, 32.470008850097656, 35.71154022216797, 36.334285736083984, 39.2397346496582, 42.0988883972168, 39.495872497558594, 38.85846710205078, 39.704463958740234, 42.50116729736328, 47.120208740234375, 42.453006744384766, 39.04662322998047, 36.15392303466797, 39.506591796875, 35.71080017089844, 50.02427673339844, 44.12415313720703, 46.82429504394531, 38.445823669433594, 44.501182556152344, 48.743125915527344, 43.23292541503906, 48.12730407714844, 48.53858184814453, 44.645050048828125, 41.93211364746094, 47.039878845214844, 50.669715881347656, 44.60198974609375, 43.67022705078125, 51.14381790161133, 45.01582336425781, 48.3118782043457, 44.028717041015625, 48.74882507324219, 40.77801513671875, 46.29175567626953, 50.06710433959961, 50.606571197509766, 45.973472595214844, 51.73118209838867, 50.167869567871094, 43.83617401123047, 51.72911071777344, 46.72873306274414, 49.87376022338867, 50.56968688964844, 53.206878662109375, 52.86679458618164, 53.69436264038086, 54.33921813964844, 50.42327117919922, 51.57517623901367, 52.06342697143555, 56.81121826171875, 53.71433639526367, 52.36737060546875, 54.3026008605957, 52.81864929199219, 54.83494186401367, 53.845699310302734, 60.0541877746582, 55.41688537597656, 53.602115631103516, 56.24493408203125, 51.036354064941406, 53.314083099365234, 51.285438537597656, 57.330204010009766, 61.74441146850586, 53.044918060302734, 46.99629592895508, 58.793617248535156, 57.361412048339844, 50.81477737426758, 53.34074401855469, 61.95996856689453, 61.91532897949219, 56.92576217651367, 61.10246276855469, 60.6451416015625, 57.8077392578125, 61.35550308227539, 59.26953125, 60.15382766723633, 60.47406768798828, 61.767452239990234, 65.51990509033203, 63.65806198120117, 60.6356201171875, 60.551334381103516, 65.02727508544922, 62.06404113769531, 65.74710083007812, 67.6075210571289, 69.68040466308594, 70.18928527832031, 61.9834098815918, 68.04218292236328, 61.69974899291992, 74.76795196533203, 74.49076080322266, 72.96957397460938])
# predictions_method2 = np.array([20.359386444091797, 20.981578826904297, 23.624629974365234, 24.684349060058594, 30.315608978271484, 24.79095458984375, 26.371707916259766, 18.99991226196289, 24.616226196289062, 30.11337661743164, 30.11798095703125, 21.79340362548828, 22.668331146240234, 22.341201782226562, 25.113727569580078, 23.627830505371094, 30.823440551757812, 28.45055389404297, 29.958984375, 26.660865783691406, 28.886119842529297, 33.931053161621094, 30.055355072021484, 29.089603424072266, 28.746875762939453, 30.40109634399414, 21.886062622070312, 31.881858825683594, 30.018817901611328, 29.64224624633789, 29.10088348388672, 27.603527069091797, 26.910720825195312, 29.414451599121094, 35.09528732299805, 32.046478271484375, 29.772506713867188, 32.318450927734375, 25.758460998535156, 27.585342407226562, 28.238800048828125, 34.72515869140625, 28.831012725830078, 25.90377426147461, 29.585201263427734, 33.877891540527344, 24.698802947998047, 28.372825622558594, 33.05821990966797, 29.483062744140625, 27.932640075683594, 36.66022491455078, 31.124025344848633, 25.72095489501953, 30.799821853637695, 30.25030517578125, 33.029876708984375, 31.040441513061523, 36.74241638183594, 30.5189208984375, 27.04672622680664, 29.91059112548828, 32.50680160522461, 31.66111946105957, 26.249603271484375, 31.099552154541016, 30.077320098876953, 40.710845947265625, 43.945106506347656, 30.648590087890625, 27.53711700439453, 36.72924041748047, 32.00118637084961, 35.916358947753906, 32.4539794921875, 33.78947067260742, 33.86930847167969, 32.1939811706543, 40.07756042480469, 39.506935119628906, 39.013885498046875, 31.767780303955078, 48.25291061401367, 35.56441879272461, 30.531200408935547, 54.28379440307617, 33.51396942138672, 34.73809814453125, 41.60188674926758, 33.3599853515625, 29.754714965820312, 49.89447021484375, 41.36022186279297, 44.317771911621094, 34.727760314941406, 43.738990783691406, 43.238616943359375, 41.3872184753418, 47.75445556640625, 49.669517517089844, 45.61174774169922, 42.199302673339844, 49.52839660644531, 50.40575408935547, 45.52775192260742, 40.382198333740234, 52.614707946777344, 38.41709518432617, 47.36898422241211, 44.2684440612793, 45.10333251953125, 32.56770324707031, 41.91485595703125, 53.15675354003906, 53.03179168701172, 37.74666213989258, 50.216407775878906, 38.89655303955078, 43.853668212890625, 47.10209655761719, 35.06809997558594, 49.73231506347656, 43.35698699951172, 44.10224151611328, 47.26051330566406, 47.21842575073242, 55.51325225830078, 40.419612884521484, 52.30570983886719, 51.1917610168457, 54.92708206176758, 45.81974792480469, 50.046592712402344, 52.2424430847168, 53.54248046875, 58.502899169921875, 55.523651123046875, 59.589447021484375, 57.6822624206543, 56.17357635498047, 61.31023406982422, 46.7022705078125, 54.27058792114258, 54.823211669921875, 54.83047866821289, 53.019195556640625, 45.56232452392578, 50.99714660644531, 52.524723052978516, 54.419620513916016, 45.869667053222656, 51.81822204589844, 59.1754035949707, 51.88494873046875, 50.555782318115234, 61.473716735839844, 58.927337646484375, 63.6817512512207, 53.464439392089844, 64.830322265625, 54.49223327636719, 39.362892150878906, 57.93914031982422, 64.49085998535156, 62.23607635498047, 60.978153228759766, 57.5108757019043, 63.441429138183594, 61.33943176269531, 66.27832794189453, 66.56902313232422, 69.6268539428711, 70.08366394042969, 67.25054168701172, 64.0247573852539, 63.84609603881836, 71.85539245605469, 72.2047348022461, 71.53009033203125])
# # predicted_values_3 = np.array([20.709388732910156, 22.650421142578125, 22.356365203857422, 25.628448486328125, 23.648094177246094, 22.72052001953125, 24.858837127685547, 22.577369689941406, 21.945152282714844, 28.834152221679688, 26.75075912475586, 25.925392150878906, 23.64932632446289, 20.818683624267578, 23.28227996826172, 27.540916442871094, 32.33331298828125, 26.538578033447266, 29.03131103515625, 24.804466247558594, 27.616085052490234, 26.156810760498047, 36.594703674316406, 33.65392303466797, 27.480209350585938, 24.430416107177734, 22.631053924560547, 29.687835693359375, 26.819286346435547, 31.76658058166504, 28.238998413085938, 26.464641571044922, 23.252197265625, 28.379737854003906, 28.559261322021484, 26.151512145996094, 28.022422790527344, 25.656051635742188, 25.781631469726562, 33.401123046875, 28.704830169677734, 32.18059539794922, 29.185226440429688, 25.90926742553711, 27.234695434570312, 33.720436096191406, 25.043701171875, 31.877727508544922, 35.55771255493164, 26.386383056640625, 26.465797424316406, 35.48019027709961, 26.27515411376953, 28.4293212890625, 30.165454864501953, 26.659286499023438, 34.22639846801758, 31.5599308013916, 34.216094970703125, 30.822309494018555, 31.170368194580078, 29.709365844726562, 34.123085021972656, 31.420835494995117, 33.862281799316406, 28.50090789794922, 24.985313415527344, 35.74579620361328, 34.16603088378906, 25.55462646484375, 31.84980010986328, 31.494728088378906, 41.99177169799805, 37.529319763183594, 27.024311065673828, 37.111610412597656, 49.61525344848633, 35.07685089111328, 30.59552764892578, 32.627769470214844, 36.66434860229492, 33.46971130371094, 36.02314758300781, 41.203330993652344, 34.98063659667969, 46.95598602294922, 39.1395149230957, 34.177818298339844, 41.5614128112793, 43.58424377441406, 35.21723175048828, 42.55582046508789, 48.30585479736328, 45.354801177978516, 36.46459197998047, 54.01540756225586, 45.38681411743164, 50.02299499511719, 45.45824432373047, 51.23316955566406, 55.75320816040039, 41.58723449707031, 46.06624221801758, 45.94358825683594, 45.502418518066406, 47.062774658203125, 53.07945251464844, 38.68708419799805, 40.92871856689453, 54.04033660888672, 43.41694641113281, 35.27204895019531, 55.22027587890625, 59.372920989990234, 57.92875289916992, 34.77661895751953, 47.183311462402344, 45.77496337890625, 47.3514404296875, 52.03343200683594, 36.99412536621094, 47.55889129638672, 40.970428466796875, 50.089412689208984, 60.23388671875, 53.885467529296875, 62.030540466308594, 47.820472717285156, 46.51687240600586, 47.919837951660156, 44.56976318359375, 48.92222595214844, 47.521873474121094, 47.13915252685547, 48.66950225830078, 60.02964782714844, 54.03653335571289, 55.92916488647461, 61.905975341796875, 58.14646530151367, 56.668495178222656, 49.52705001831055, 43.000850677490234, 51.23923110961914, 61.129783630371094, 46.641902923583984, 49.706722259521484, 54.57403564453125, 53.788116455078125, 60.99913024902344, 49.22002410888672, 54.625728607177734, 58.59321594238281, 57.21925354003906, 58.64161682128906, 60.195045471191406, 57.96293640136719, 56.05620574951172, 54.201934814453125, 62.57504653930664, 59.10917282104492, 57.81369400024414, 58.06817626953125, 65.20568084716797, 59.52033996582031, 48.596431732177734, 66.59346771240234, 58.725379943847656, 61.54396438598633, 61.33317565917969, 58.05138397216797, 67.01185607910156, 67.50159454345703, 60.17533493041992, 61.457969665527344, 66.6351089477539, 69.64892578125, 70.6467514038086, 66.14570617675781])
# # predicted_values_4 = np.array([27.199317932128906, 25.453121185302734, 23.35177993774414, 29.259521484375, 23.162208557128906, 26.174903869628906, 24.239971160888672, 21.70119857788086, 23.886871337890625, 27.280406951904297, 24.038436889648438, 26.225238800048828, 26.95334243774414, 21.912883758544922, 21.551517486572266, 26.218017578125, 40.52155303955078, 26.193199157714844, 28.463394165039062, 23.81222152709961, 30.677871704101562, 27.152606964111328, 37.23973846435547, 33.034515380859375, 31.675724029541016, 23.971946716308594, 26.30206298828125, 31.708534240722656, 26.387882232666016, 23.355857849121094, 31.955890655517578, 27.805130004882812, 26.71579360961914, 26.900806427001953, 32.88970947265625, 25.968608856201172, 25.120941162109375, 26.7161865234375, 22.244400024414062, 33.7736701965332, 23.968433380126953, 29.18295669555664, 31.3533878326416, 23.960933685302734, 27.30398178100586, 34.61796951293945, 25.712627410888672, 41.09442138671875, 31.8604793548584, 30.675743103027344, 29.194000244140625, 33.36613464355469, 26.921443939208984, 24.601512908935547, 28.693893432617188, 25.367210388183594, 41.98644256591797, 33.345191955566406, 34.831024169921875, 31.173072814941406, 31.741926193237305, 30.826416015625, 34.642051696777344, 34.897342681884766, 24.172340393066406, 34.67384338378906, 28.753036499023438, 32.99547576904297, 29.019454956054688, 25.101947784423828, 29.30581283569336, 34.78028106689453, 32.32115173339844, 42.8293342590332, 34.009239196777344, 29.742774963378906, 35.97837829589844, 37.6982421875, 32.82579803466797, 39.661720275878906, 41.862144470214844, 38.27655792236328, 33.76741027832031, 35.075836181640625, 28.762744903564453, 41.783843994140625, 48.78382110595703, 36.722373962402344, 37.27411651611328, 44.35650634765625, 41.733848571777344, 44.540672302246094, 47.29499816894531, 41.98533248901367, 37.631500244140625, 52.78556823730469, 49.0516357421875, 42.98612594604492, 38.00579071044922, 47.717254638671875, 52.7292366027832, 37.434139251708984, 40.59637451171875, 48.19292068481445, 42.307613372802734, 53.84859085083008, 53.737335205078125, 39.77985382080078, 38.72235870361328, 44.38771438598633, 42.72369384765625, 32.25300598144531, 54.519744873046875, 56.5589714050293, 56.523651123046875, 30.969602584838867, 46.87740707397461, 48.57013702392578, 42.65369415283203, 55.308834075927734, 33.64210510253906, 50.62290954589844, 36.0781364440918, 50.68043899536133, 57.796730041503906, 53.74596405029297, 52.92428207397461, 47.31168746948242, 47.835182189941406, 46.53765869140625, 53.22270202636719, 48.173160552978516, 49.90242004394531, 48.436859130859375, 45.31203842163086, 65.37207794189453, 51.2203254699707, 61.59334945678711, 57.17992401123047, 54.01596450805664, 49.69233703613281, 45.15123748779297, 50.62382888793945, 48.32383728027344, 56.06903076171875, 42.678985595703125, 50.856910705566406, 55.16461944580078, 46.665164947509766, 62.08158874511719, 47.42266082763672, 54.522666931152344, 55.694915771484375, 56.415618896484375, 60.653717041015625, 56.3015251159668, 57.82465744018555, 54.11566925048828, 48.935760498046875, 64.48925018310547, 52.428592681884766, 43.969398498535156, 61.774139404296875, 65.17576599121094, 56.63124465942383, 49.98274230957031, 62.293418884277344, 56.03180694580078, 54.081504821777344, 58.48815155029297, 56.8209342956543, 62.08258056640625, 67.49510955810547, 62.46796798706055, 67.75716400146484, 68.78570556640625, 69.03062438964844, 70.5969467163086, 62.780181884765625])

# # 计算x轴坐标
# x = list(range(len(predictions_method1)))

# # 创建图像
# plt.figure(figsize=(10, 6))

# # 绘制方法1的预测结果作为散点图
# plt.scatter(x, predictions_method1, color='blue', label='L1-L3_age', alpha=0.6, s=20)
# # 绘制方法2的预测结果作为散点图
# plt.scatter(x, predictions_method2, color='purple', label='L3-L4_age', alpha=0.6, s=20)


# # 在基准值上加3形成一条曲线
# curve = predictions_method1 
# plt.plot(x, curve, color='red', label='risk-curve', linewidth=1)
# plt.plot(x, predictions_method1, color='blue', label='baseline-curve', linewidth=0.6)
# # 填充曲线上方为红色背景
# plt.fill_between(x, curve, max(curve.max(), predictions_method2.max()) + 5, color='red', alpha=0.3, label='Risk Area')

# # 填充曲线下方为绿色背景
# plt.fill_between(x, curve, min(curve.min(), predictions_method2.min()) - 10, color='green', alpha=0.3)
# indices = np.arange(len(predictions_method1))
# risk_indices = predictions_method2 > curve
# plt.scatter(indices[risk_indices], predictions_method2[risk_indices], color='Red', s=40, edgecolors='purple', label='HighRisk Predictions')  # 大点，突出显示

# plt.xlabel('subjects sample')
# plt.ylabel('Age')
# plt.title('Diagram of L3-L4 risk warning area')
# plt.legend()

# # 显示图像
# plt.show()

